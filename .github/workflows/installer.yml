name: fetch_firmwares

on: [push]

# Ensures that only one deploy task per branch/environment will run at a time.
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: prepare
        uses: ActionsTools/read-json-action@main
        with:
          file_path: 'manifests.json'
    outputs:
      versions: ${{steps.prepare.outputs.versions}}

  download:
    needs: prepare-environment
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        version: ${{fromJson(needs.prepare-environment.outputs.versions)}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: robinraju/release-downloader@v1.8
        id: "releaseid"
        with: 
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: "steadramon/ESPGeiger"
          
          # A flag to set the download target as latest release
          # The default value is 'false'
          tag: "v${{matrix.version}}"
          
          # The name of the file to download.
          # Use this field only to specify filenames other than tarball or zipball, if any.
          # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          fileName: "*.bin"
          
          # Download the attached tarball (*.tar.gz)
          tarBall: false
          
          # Download the attached zipball (*.zip)
          zipBall: false
          
          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: "downloaded/v${{matrix.version}}"
  gitpush:
    needs: download
    runs-on: ubuntu-latest
      - name: Push updated master firmwares in branch firmware
        run: |
          COMMIT="Firmware built from ${{steps.releaseid.outputs.tag_name}}"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add -A
          git commit --allow-empty -m "$COMMIT"
          git push origin main -f